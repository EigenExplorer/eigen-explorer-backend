generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Avs {
  address String @id @unique

  metadataUrl         String?
  metadataName        String
  metadataDescription String
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  isMetadataSynced    Boolean @default(false)

  operators             AvsOperator[]
  curatedMetadata       AvsCuratedMetadata?
  restakeableStrategies String[]

  totalStakers   Int @default(0)
  totalOperators Int @default(0)

  tvlEth     Decimal @default(0) @db.Decimal(20, 8)
  sharesHash String?

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@index([createdAtBlock])
}

model AvsCuratedMetadata {
  avs        Avs    @relation(fields: [avsAddress], references: [address])
  avsAddress String @id @unique

  metadataName        String?
  metadataDescription String?
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?

  tags       String[]
  isVisible  Boolean  @default(false)
  isVerified Boolean  @default(false)

  @@index([tags], map: "tags_1")
}

model AvsOperator {
  avs             Avs      @relation(fields: [avsAddress], references: [address])
  avsAddress      String
  operator        Operator @relation(fields: [operatorAddress], references: [address])
  operatorAddress String

  isActive           Boolean
  restakedStrategies String[]

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@id([avsAddress, operatorAddress])
  @@index([avsAddress])
}

model Strategies {
  address String @id @unique
  symbol  String

  sharesToUnderlying String

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Operator {
  address String @id @unique

  metadataUrl         String?
  metadataName        String
  metadataDescription String
  metadataDiscord     String?
  metadataLogo        String?
  metadataTelegram    String?
  metadataWebsite     String?
  metadataX           String?
  isMetadataSynced    Boolean @default(false)

  avs     AvsOperator[]
  shares  OperatorStrategyShares[]
  stakers Staker[]

  totalStakers Int @default(0)
  totalAvs     Int @default(0)

  tvlEth     Decimal @default(0) @db.Decimal(20, 8)
  sharesHash String?

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@index([createdAtBlock])
}

model OperatorStrategyShares {
  Operator        Operator @relation(fields: [operatorAddress], references: [address])
  operatorAddress String
  strategyAddress String
  shares          String

  @@id([operatorAddress, strategyAddress])
  @@index([operatorAddress])
}

model Staker {
  address String @id @unique

  operator        Operator? @relation(fields: [operatorAddress], references: [address])
  operatorAddress String?

  shares StakerStrategyShares[]

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@index([operatorAddress])
}

model StakerStrategyShares {
  Staker          Staker @relation(fields: [stakerAddress], references: [address])
  stakerAddress   String
  strategyAddress String
  shares          String

  @@id([stakerAddress, strategyAddress])
  @@index([stakerAddress])
}

model Deposit {
  transactionHash String @id @unique
  stakerAddress   String
  tokenAddress    String
  strategyAddress String
  shares          String

  createdAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
}

model Pod {
  address     String @id @unique
  owner       String
  blockNumber BigInt // @Deprecated, will remove in future release

  createdAtBlock BigInt   @default(0)
  updatedAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model ValidatorRestake {
  podAddress     String
  validatorIndex BigInt
  blockNumber    BigInt

  @@id([podAddress, validatorIndex])
}

model Validator {
  validatorIndex BigInt @id
  pubkey         String
  status         String

  balance               BigInt
  effectiveBalance      BigInt
  slashed               Boolean
  withdrawalCredentials String
  activationEpoch       BigInt
  exitEpoch             BigInt
  updatedAt             DateTime
}

model WithdrawalQueued {
  withdrawalRoot String @id @unique
  nonce          Int

  stakerAddress     String
  delegatedTo       String
  withdrawerAddress String
  strategies        String[]
  shares            String[]

  createdAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())

  completedWithdrawal WithdrawalCompleted?
}

model WithdrawalCompleted {
  withdrawalRoot  String  @id @unique
  receiveAsTokens Boolean @default(false)

  createdAtBlock BigInt   @default(0)
  createdAt      DateTime @default(now())

  queuedWithdrawal WithdrawalQueued @relation(fields: [withdrawalRoot], references: [withdrawalRoot])
}

// Collection to store system settings
model Settings {
  key       String   @id @unique
  value     Json     @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Metric routes

model MetricAvsHourly {
  id         Int    @id @default(autoincrement())
  avsAddress String

  totalOperators  Int
  totalStakers    Int
  changeOperators Int
  changeStakers   Int

  timestamp DateTime

  @@unique([avsAddress, timestamp])
  @@index([avsAddress])
  @@index([timestamp])
}

model MetricAvsStrategyHourly {
  id              Int    @id @default(autoincrement())
  avsAddress      String
  strategyAddress String

  tvl       Decimal @db.Decimal(20, 8)
  changeTvl Decimal @db.Decimal(20, 8)

  timestamp DateTime

  @@unique([avsAddress, strategyAddress, timestamp])
  @@index([avsAddress, strategyAddress])
  @@index([timestamp])
}

model MetricOperatorHourly {
  id              Int    @id @default(autoincrement())
  operatorAddress String

  totalStakers  Int
  totalAvs      Int
  changeStakers Int
  changeAvs     Int

  timestamp DateTime

  @@unique([operatorAddress, timestamp])
  @@index([operatorAddress])
  @@index([timestamp])
}

model MetricOperatorStrategyHourly {
  id              Int    @id @default(autoincrement())
  operatorAddress String
  strategyAddress String

  tvl       Decimal @db.Decimal(20, 8)
  changeTvl Decimal @db.Decimal(20, 8)

  timestamp DateTime

  @@unique([operatorAddress, strategyAddress, timestamp])
  @@index([operatorAddress, strategyAddress])
  @@index([timestamp])
}

model MetricStrategyHourly {
  id Int @id @default(autoincrement())

  strategyAddress String

  tvl       Decimal @db.Decimal(20, 8)
  changeTvl Decimal @db.Decimal(20, 8)

  timestamp DateTime

  @@unique([strategyAddress, timestamp])
  @@index([timestamp])
}

model MetricEigenPodsHourly {
  id Int @id @default(autoincrement())

  tvlEth       Decimal @db.Decimal(20, 8)
  changeTvlEth Decimal @db.Decimal(20, 8)
  totalPods    Int
  changePods   Int

  timestamp DateTime

  @@unique([timestamp])
  @@index([timestamp])
}

model MetricDepositHourly {
  id Int @id @default(autoincrement())

  tvlEth         Decimal @db.Decimal(20, 8)
  totalDeposits  Int
  changeTvlEth   Decimal @db.Decimal(20, 8)
  changeDeposits Int

  timestamp DateTime

  @@index([timestamp])
}

model MetricWithdrawalHourly {
  id Int @id @default(autoincrement())

  tvlEth            Decimal @db.Decimal(20, 8)
  totalWithdrawals  Int
  changeTvlEth      Decimal @db.Decimal(20, 8)
  changeWithdrawals Int

  timestamp DateTime

  @@index([timestamp])
}

// RAW Event Logs

model EventLogs_AVSMetadataURIUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  avs         String
  metadataURI String

  @@id([transactionHash, transactionIndex])
  @@index([avs])
  @@index([blockNumber])
}

model EventLogs_OperatorMetadataURIUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  operator    String
  metadataURI String

  @@id([transactionHash, transactionIndex])
  @@index([operator])
  @@index([blockNumber])
}

model EventLogs_OperatorAVSRegistrationStatusUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  operator String
  avs      String
  status   Int

  @@id([transactionHash, transactionIndex])
  @@index([operator, avs])
  @@index([blockNumber])
}

model EventLogs_PodDeployed {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  eigenPod String
  podOwner String

  @@id([transactionHash, transactionIndex])
  @@index([eigenPod, podOwner])
  @@index([blockNumber])
}

model EventLogs_PodSharesUpdated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  podOwner    String
  sharesDelta String

  @@id([transactionHash, transactionIndex])
  @@index([podOwner])
}

model EventLogs_StakerDelegated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
  @@index([blockNumber])
}

model EventLogs_StakerUndelegated {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
  @@index([blockNumber])
}

model EventLogs_OperatorSharesIncreased {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String
  strategy String
  shares   String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
  @@index([blockNumber])
}

model EventLogs_OperatorSharesDecreased {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  operator String
  strategy String
  shares   String

  @@id([transactionHash, transactionIndex])
  @@index([staker, operator])
  @@index([blockNumber])
}

model EventLogs_WithdrawalQueued {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  withdrawalRoot String
  staker         String
  delegatedTo    String
  withdrawer     String
  nonce          BigInt
  startBlock     BigInt
  strategies     String[]
  shares         String[]

  @@id([transactionHash, transactionIndex])
  @@index([withdrawalRoot])
  @@index([blockNumber])
}

model EventLogs_WithdrawalCompleted {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  withdrawalRoot String

  @@id([transactionHash, transactionIndex])
  @@index([withdrawalRoot])
  @@index([blockNumber])
}

model EventLogs_Deposit {
  address String

  transactionHash  String
  transactionIndex Int
  blockNumber      BigInt
  blockHash        String
  blockTime        DateTime

  staker   String
  token    String
  strategy String
  shares   String

  @@id([transactionHash, transactionIndex])
  @@index([staker])
  @@index([blockNumber])
}

model EthPricesDaily {
  id Int @id @default(autoincrement())

  symbol    String
  ethPrice  Decimal  @db.Decimal(20, 8)
  timestamp DateTime

  @@index([timestamp])
}

// Misc

model Evm_BlockData {
  number    BigInt   @id
  timestamp DateTime
}

// Views

view viewHourlyDepositData {
  strategyAddress String
  totalDeposits   Int
  totalShares     Decimal  @db.Decimal(36, 0)
  timestamp       DateTime

  @@unique([strategyAddress, timestamp])
}

view viewHourlyWithdrawalData {
  strategyAddress  String
  totalWithdrawals Int
  totalShares      Decimal  @db.Decimal(36, 0)
  timestamp        DateTime

  @@unique([strategyAddress, timestamp])
}
